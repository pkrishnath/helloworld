import org.gradle.internal.os.OperatingSystem

buildscript {
	ext.spring_boot_version = '2.1.3.RELEASE'

	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "http://repo.spring.io/plugins-release" }
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}"
		classpath "io.spring.gradle:propdeps-plugin:0.0.10.RELEASE"
		classpath "org.openapitools:openapi-generator-gradle-plugin:3.3.0"
		classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.5.2"
	}
}


apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'


group = 'com.revolut'
version = '0.0.1-SNAPSHOT'
sourceCompatibility=1.8
targetCompatibility=1.8

repositories {
	mavenCentral()
}

defaultTasks 'bootRun'

bootWar {
	mainClassName = 'com.revolut.hometask.HelloworldApplication'
}

war {
	enabled = true
	extension = 'war.original'
}

springBoot {
	mainClassName = 'com.revolut.hometask.HelloworldApplication'
}

if (OperatingSystem.current().isWindows()) {
	// https://stackoverflow.com/questions/40037487/the-filename-or-extension-is-too-long-error-using-gradle
	task classpathJar(type: Jar) {
		dependsOn configurations.runtime
		appendix = 'classpath'

		doFirst {
			manifest {
				attributes 'Class-Path': configurations.runtime.files.collect {
					it.toURI().toURL().toString().replaceFirst(/file:\/+/, '/').replaceAll(' ', '%20')
				}.join(' ')
			}
		}
	}

	bootRun {
		dependsOn classpathJar
		doFirst {
			classpath = files("$buildDir/classes/java/main", "$buildDir/resources/main", classpathJar.archivePath)
		}
	}
}

test {
	reports.html.enabled = false
}

task testReport(type: TestReport) {
	destinationDir = file("$buildDir/reports/tests")
	reportOn test
}

apply from: 'gradle/docker.gradle'

if (project.hasProperty('prod')) {
	apply from: 'gradle/profile_prod.gradle'
} else {
	apply from: 'gradle/profile_dev.gradle'
}


task cleanResources(type: Delete) {
	delete 'build/resources'
}

wrapper {
	gradleVersion = '4.10.2'
}

task stage(dependsOn: 'bootWar') {
}

configurations {
	providedRuntime
	compile.exclude module: "spring-boot-starter-tomcat"
}

repositories {
	mavenLocal()
	mavenCentral()
	jcenter()
}


dependencies {
	compile "org.hibernate:hibernate-core"
	compile "com.zaxxer:HikariCP"
	compile "org.apache.commons:commons-lang3"
	compile "javax.transaction:javax.transaction-api"
	compile "org.hibernate:hibernate-entitymanager"
	compile "org.hibernate.validator:hibernate-validator"
	compile "org.springframework.boot:spring-boot-loader-tools"
	compile "org.springframework.boot:spring-boot-starter-logging"
	compile "org.springframework.boot:spring-boot-starter-actuator"
	compile "org.springframework.boot:spring-boot-starter-data-jpa"
	compile ("org.springframework.boot:spring-boot-starter-web") {
		exclude module: 'spring-boot-starter-tomcat'
	}
	compile "org.springframework.boot:spring-boot-starter-undertow"

	// https://projectlombok.org
	compileOnly 'org.projectlombok:lombok:1.18.6'
	annotationProcessor 'org.projectlombok:lombok:1.18.6'


	compile "mysql:mysql-connector-java"
	annotationProcessor ("org.springframework.boot:spring-boot-configuration-processor") {
		exclude group: 'com.vaadin.external.google', module: 'android-json'
	}
	testCompile "com.jayway.jsonpath:json-path"
	testCompile ("org.springframework.boot:spring-boot-starter-test") {
		exclude group: 'com.vaadin.external.google', module: 'android-json'
	}
	testCompile "org.springframework.boot:spring-boot-test"
	testCompile "org.assertj:assertj-core"
	testCompile "junit:junit"
	testCompile "org.mockito:mockito-core"
	testCompile "org.hamcrest:hamcrest-library"
	testCompile "com.h2database:h2"
}

